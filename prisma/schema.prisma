generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid()) @db.Uuid
  auth_id  String  @unique
  nickname String
  email    String  @unique
  image    String?

  webhooks  webhooks[]
  createrOf projects[] @relation("project_owner")
  members   members[]
}

model members {
  id          String        @id @default(uuid()) @db.Uuid
  project     projects      @relation(fields: [project_id], references: [id])
  member      User          @relation(fields: [user_id], references: [id])
  project_id  String        @db.Uuid
  user_id     String        @db.Uuid
  permissions permissions[]

  @@unique([project_id, user_id])
}

model permissions {
  id         String   @id @default(uuid()) @db.Uuid
  project    projects @relation(fields: [project_id], references: [id])
  member     members  @relation(fields: [user_id], references: [id])
  project_id String   @db.Uuid
  user_id    String   @db.Uuid

  documents     String? @default("None")
  maps          String? @default("None")
  boards        String? @default("None")
  screens       String? @default("None")
  dictionaries  String? @default("None")
  calendars     String? @default("None")
  random_tables String? @default("None")
  timelines     String? @default("None")
  tags          String? @default("None")
  alter_names   String? @default("None")
  entities      String? @default("None")

  @@unique([project_id, user_id])
}

model projects {
  id    String  @id @default(uuid()) @db.Uuid
  title String  @default("New Project")
  image String?

  ownerId String
  owner   User   @relation("project_owner", fields: [ownerId], references: [auth_id], onDelete: Cascade)

  members members[]

  documents     documents[]
  maps          maps[]
  boards        boards[]
  screens       screens[]
  dictionaries  dictionaries[]
  calendars     calendars[]
  random_tables random_tables[]
  tags          tags[]
  swatches      swatches[]
  timelines     timelines[]
  alter_names   alter_names[]
  permissions   permissions[]
  entities      entities[]
}

model documents {
  id         String  @id @default(uuid()) @db.Uuid
  title      String  @default("New Document")
  content    Json?   @db.JsonB
  icon       String? @default("ph:files-thin")
  folder     Boolean @default(false)
  isPublic   Boolean @default(false)
  sort       Int     @default(0)
  template   Boolean @default(false)
  properties Json?
  image      String?

  // Relations
  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid
  nodes      nodes[]

  parentId String?     @db.Uuid
  parent   documents?  @relation("parentChildDocuments", fields: [parentId], references: [id], onDelete: Cascade)
  children documents[] @relation("parentChildDocuments")

  tags        tags[]
  alter_names alter_names[]

  cards  cards[]
  events events[]
  fields fields[]
}

model alter_names {
  id    String @id @default(uuid()) @db.Uuid
  title String @default("New Document")

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  document documents @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String    @db.Uuid

  @@unique([title, parentId])
}

model maps {
  id          String  @id @default(uuid()) @db.Uuid
  title       String  @default("New Map")
  folder      Boolean @default(false)
  isPublic    Boolean @default(false)
  sort        Int     @default(0)
  clusterPins Boolean @default(false)

  image String?
  icon  String? @default("ph:map-trifold")

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  map_pins   map_pins[]
  map_layers map_layers[]

  parentId String?  @db.Uuid
  parent   maps?    @relation("parentChildMaps", fields: [parentId], references: [id], onDelete: Cascade)
  children maps[]   @relation("parentChildMaps")
  tags     tags[]
  fields   fields[]
}

model map_pins {
  id              String  @id @default(uuid()) @db.Uuid
  text            String?
  parent          maps?   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId        String  @db.Uuid
  lat             Float
  lng             Float
  color           String  @default("#ffffff")
  borderColor     String  @default("#ffffff")
  backgroundColor String  @default("#000000")
  icon            String?
  image           String?
  showBackground  Boolean @default(true)
  showBorder      Boolean @default(true)
  isPublic        Boolean @default(false)
  tags            tags[]

  map_link String?  @db.Uuid
  doc_id   String?  @db.Uuid
  fields   fields[]
}

model map_layers {
  id       String  @id @default(uuid()) @db.Uuid
  title    String  @default("New Layer")
  image    String?
  parentId String  @db.Uuid
  isPublic Boolean @default(false)
  maps     maps?   @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model boards {
  id       String  @id @default(uuid()) @db.Uuid
  title    String  @default("New Board")
  folder   Boolean @default(false)
  isPublic Boolean @default(false)
  sort     Int     @default(0)

  icon String? @default("ph:graph-light")

  defaultNodeShape String @default("rectangle")
  defaultNodeColor String @default("#595959")
  defaultEdgeColor String @default("#595959")

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid
  parentId   String?  @db.Uuid
  parent     boards?  @relation("parentChildBoards", fields: [parentId], references: [id], onDelete: Cascade)
  children   boards[] @relation("parentChildBoards")
  nodes      nodes[]
  edges      edges[]
  tags       tags[]
  fields     fields[]
}

model nodes {
  id    String  @id @default(uuid()) @db.Uuid
  label String?

  type   String?
  width  Int?
  height Int?
  x      Float?
  y      Float?

  fontSize   Int?
  fontColor  String?
  fontFamily String?
  textVAlign String?
  textHAlign String?

  backgroundColor   String?
  backgroundOpacity Float?

  locked   Boolean?
  template Boolean?
  zIndex   Int?

  board        boards     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  document     documents? @relation(fields: [doc_id], references: [id])
  doc_id       String?    @db.Uuid
  image        String?
  parentId     String     @db.Uuid
  edges_source edges[]    @relation("edges_source")
  edges_target edges[]    @relation("edges_target")
  tags         tags[]
  fields       fields[]
}

model edges {
  id    String  @id @default(uuid()) @db.Uuid
  label String?

  curveStyle  String?
  lineStyle   String?
  lineColor   String?
  lineFill    String?
  lineOpacity Float?
  width       Int?

  controlPointDistances Int?
  controlPointWeights   Float?

  taxiDirection String?
  taxiTurn      Int?

  arrowScale Int?

  targetArrowShape String?
  targetArrowFill  String?
  targetArrowColor String?

  sourceArrowShape String?
  sourceArrowFill  String?
  sourceArrowColor String?

  midTargetArrowShape String?
  midTargetArrowFill  String?
  midTargetArrowColor String?

  midSourceArrowShape String?
  midSourceArrowFill  String?
  midSourceArrowColor String?

  fontSize   Int?
  fontColor  String?
  fontFamily String?

  zIndex Int?

  board     boards @relation(fields: [parentId], references: [id], onDelete: Cascade)
  source    nodes  @relation("edges_source", fields: [source_id], references: [id], onDelete: Cascade)
  target    nodes  @relation("edges_target", fields: [target_id], references: [id], onDelete: Cascade)
  source_id String @db.Uuid
  target_id String @db.Uuid
  parentId  String @db.Uuid
  tags      tags[]

  @@unique([source_id, target_id])
}

model screens {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @default("New Screen")
  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parentId String?   @db.Uuid
  parent   screens?  @relation("parentChildScreens", fields: [parentId], references: [id], onDelete: Cascade)
  children screens[] @relation("parentChildScreens")

  icon     String  @default("fluent:board-24-regular")
  folder   Boolean @default(false)
  isPublic Boolean @default(false)
  sort     Int     @default(0)

  sectionSize String     @default("md")
  sections    sections[]
  tags        tags[]
}

model sections {
  id       String @id @default(uuid()) @db.Uuid
  title    String
  sort     Int    @default(0)
  cardSize String @default("md")

  screens  screens? @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?  @db.Uuid

  cards cards[]
}

model cards {
  id   String @id @default(uuid()) @db.Uuid
  sort Int    @default(0)

  document    documents @relation(fields: [documentsId], references: [id], onDelete: Cascade)
  documentsId String    @db.Uuid

  sections sections? @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?   @db.Uuid

  tags tags[]

  @@unique([parentId, documentsId])
}

model dictionaries {
  id    String @id @default(uuid()) @db.Uuid
  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  icon     String  @default("ph:book-bookmark-light")
  sort     Int     @default(0)
  folder   Boolean @default(false)
  isPublic Boolean @default(false)

  parentId String?        @db.Uuid
  parent   dictionaries?  @relation("parentChildDictionaries", fields: [parentId], references: [id], onDelete: Cascade)
  children dictionaries[] @relation("parentChildDictionaries")

  tags   tags[]
  words  words[]
  fields fields[]

  @@unique([project_id, title])
}

model words {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  translation String

  dictionary dictionaries @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId   String       @db.Uuid
  fields     fields[]

  @@unique([title, translation, parentId])
}

model calendars {
  id    String @id @default(uuid()) @db.Uuid
  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parentId String?     @db.Uuid
  parent   calendars?  @relation("parentChildCalendar", fields: [parentId], references: [id], onDelete: Cascade)
  children calendars[] @relation("parentChildCalendar")

  icon     String  @default("ph:calendar-blank-light")
  sort     Int     @default(0)
  folder   Boolean @default(false)
  isPublic Boolean @default(false)

  offset  Int  @default(0)
  hours   Int?
  minutes Int?

  eras   eras[]
  months months[]
  days   String[]
  events events[]

  tags      tags[]
  timelines timelines[]
}

model eras {
  id         String @id @default(uuid()) @db.Uuid
  title      String
  start_year Int
  end_year   Int

  calendar calendars @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String    @db.Uuid
}

model months {
  id    String @id @default(uuid()) @db.Uuid
  title String
  days  Int

  calendar calendars @relation(fields: [parentId], references: [id], onDelete: Cascade)
  sort     Int       @default(0)
  parentId String    @db.Uuid
  events   events[]
}

model events {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  isPublic Boolean @default(false)

  document documents? @relation(fields: [documentsId], references: [id])

  backgroundColor String?
  textColor       String?

  calendar calendars? @relation(fields: [calendarsId], references: [id], onDelete: Cascade)
  year     Int
  month    months     @relation(fields: [monthsId], references: [id], onDelete: Cascade)
  day      Int
  hours    Int?
  minutes  Int?

  tags tags[]

  calendarsId String?  @db.Uuid
  documentsId String?  @db.Uuid
  monthsId    String   @db.Uuid
  fields      fields[]
}

model timelines {
  id    String @id @default(uuid()) @db.Uuid
  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parentId String?     @db.Uuid
  parent   timelines?  @relation("parentChildTimeline", fields: [parentId], references: [id], onDelete: Cascade)
  children timelines[] @relation("parentChildTimeline")

  icon     String  @default("mdi:timeline-clock-outline")
  sort     Int     @default(0)
  folder   Boolean @default(false)
  isPublic Boolean @default(false)

  calendars calendars[]
}

model random_tables {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parent   random_tables?  @relation("parentChildRandomTables", fields: [parentId], references: [id], onDelete: Cascade)
  children random_tables[] @relation("parentChildRandomTables")
  parentId String?         @db.Uuid

  isShared Boolean @default(false)

  icon                 String                 @default("game-icons:perspective-dice-six-faces-random")
  folder               Boolean                @default(false)
  isPublic             Boolean                @default(false)
  sort                 Int                    @default(0)
  random_table_options random_table_options[]
}

model random_table_options {
  id           String        @id @default(uuid()) @db.Uuid
  title        String
  description  String?
  sort         Int           @default(0)
  random_table random_tables @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String        @db.Uuid
  icon         String?
  iconColor    String?
}

model tags {
  id    String @id @default(uuid()) @db.Uuid
  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  documents    documents[]
  maps         maps[]
  map_pins     map_pins[]
  boards       boards[]
  nodes        nodes[]
  edges        edges[]
  screens      screens[]
  cards        cards[]
  dictionaries dictionaries[]
  calendars    calendars[]
  events       events[]
  entities     entities[]

  @@unique([title, project_id])
}

model swatches {
  id    String  @id @default(uuid()) @db.Uuid
  title String?
  color String  @default("#595959")

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  @@unique([color, project_id])
}

model webhooks {
  id    String @id @default(uuid()) @db.Uuid
  title String
  url   String
  user  User   @relation(fields: [user_id], references: [id])

  user_id String @db.Uuid

  @@unique([id, user_id])
}

model entities {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  project     projects @relation(fields: [project_id], references: [id])
  project_id  String   @db.Uuid
  description String?
  tags        tags[]

  fields           fields[]
  entity_instances entity_instances[]

  @@unique([title, project_id])
}

model entity_instances {
  id           String         @id @default(uuid()) @db.Uuid
  entity       entities       @relation(fields: [entitiesId], references: [id])
  entitiesId   String         @db.Uuid
  field_values field_values[]
}

model fields {
  id       String   @id @default(uuid()) @db.Uuid
  title    String
  type     String
  entity   entities @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId String   @db.Uuid

  documents    documents[]
  maps         maps[]
  map_pins     map_pins[]
  boards       boards[]
  nodes        nodes[]
  events       events[]
  dictionaries dictionaries[]
  words        words[]
  field_values field_values[]
}

model field_values {
  id String @id @default(uuid()) @db.Uuid

  field            fields             @relation(fields: [fieldsId], references: [id])
  fieldsId         String             @db.Uuid
  entity_instances entity_instances[]
}
