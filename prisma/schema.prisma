generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id       String     @id @default(uuid()) @db.Uuid
  auth_id  String     @unique
  nickname String
  email    String     @unique
  image    String?
  webhooks webhooks[]

  creator_of projects[] @relation("project_owner")

  projects    projects[]    @relation("project_members")
  roles       roles[]
  permissions permissions[]
}

model roles {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  project    projects @relation(fields: [project_id], references: [id])
  project_id String   @db.Uuid

  users users[]

  view_documents     Boolean @default(false)
  edit_documents     Boolean @default(false)
  view_maps          Boolean @default(false)
  edit_maps          Boolean @default(false)
  view_boards        Boolean @default(false)
  edit_boards        Boolean @default(false)
  view_calendars     Boolean @default(false)
  edit_calendars     Boolean @default(false)
  view_timelines     Boolean @default(false)
  edit_timelines     Boolean @default(false)
  view_screens       Boolean @default(false)
  edit_screens       Boolean @default(false)
  view_dictionaries  Boolean @default(false)
  edit_dictionaries  Boolean @default(false)
  view_random_tables Boolean @default(false)
  edit_random_tables Boolean @default(false)
  edit_tags          Boolean @default(false)
  edit_alter_names   Boolean @default(false)
  upload_assets      Boolean @default(false)
  delete_assets      Boolean @default(false)

  @@unique([title, project_id])
}

model permissions {
  id String @id @default(uuid()) @db.Uuid

  project    projects @relation(fields: [project_id], references: [id])
  project_id String   @db.Uuid

  resource_type String
  resource_id   String? @db.Uuid
  permission    String

  user    users?  @relation(fields: [user_id], references: [id])
  user_id String? @db.Uuid
}

model projects {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  title      String   @default("New Project")

  owner_id String @db.Uuid
  owner    users  @relation("project_owner", fields: [owner_id], references: [id], onDelete: Cascade)

  image images? @relation("project_image")

  members     users[]       @relation("project_members")
  roles       roles[]
  permissions permissions[]

  images     images[]
  characters characters[]

  documents     documents[]
  maps          maps[]
  boards        boards[]
  screens       screens[]
  dictionaries  dictionaries[]
  calendars     calendars[]
  random_tables random_tables[]
  tags          tags[]
  swatches      swatches[]
  timelines     timelines[]
  alter_names   alter_names[]
}

model images {
  id    String @id @default(uuid()) @db.Uuid
  title String @default("New image")
  link  String

  characters characters[]
  documents  documents[]
  maps       maps[]
  map_pins   map_pins[]
  nodes      nodes[]
  events     events[]

  project_image  projects? @relation("project_image", fields: [projectImageId], references: [id])
  projectImageId String?   @unique @db.Uuid

  project_images projects @relation(fields: [projectsId], references: [id])

  projectsId String @db.Uuid
}

model characters {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  firstName String
  lastName  String?
  nickname  String?
  age       Int?
  image     images? @relation(fields: [images_id], references: [id])
  images_id String? @db.Uuid

  character_fields_templates character_fields_templates[]

  project                      projects                       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id                   String                         @db.Uuid
  character_to_character_field character_to_character_field[]
}

model character_fields {
  id                           String                         @id @default(uuid()) @db.Uuid
  title                        String
  field_type                   String
  options                      String[]
  character_fields_templates   character_fields_templates[]
  character_to_character_field character_to_character_field[]
}

model character_fields_templates {
  id               String             @id @default(uuid()) @db.Uuid
  title            String
  character_fields character_fields[]
  characters       characters[]
  value            String
}

model character_to_character_field {
  id String @id @default(uuid()) @db.Uuid

  characters    characters @relation(fields: [characters_id], references: [id])
  characters_id String     @db.Uuid

  character_fields    character_fields @relation(fields: [character_fields_id], references: [id])
  character_fields_id String           @db.Uuid
}

model documents {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title    String   @default("New Document")
  content  Json?    @db.JsonB
  icon     String?
  isFolder Boolean?
  isPublic Boolean?

  isTemplate Boolean?
  properties Json?
  image      images?  @relation(fields: [images_id], references: [id])
  images_id  String?  @db.Uuid

  // Relations
  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid
  nodes      nodes[]

  parent_id String?     @db.Uuid
  parent    documents?  @relation("parentChildDocuments", fields: [parent_id], references: [id], onDelete: Cascade)
  children  documents[] @relation("parentChildDocuments")

  tags        tags[]
  alter_names alter_names[]

  cards  cards[]
  events events[]
}

model alter_names {
  id    String @id @default(uuid()) @db.Uuid
  title String @default("New Document")

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  document  documents @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String    @db.Uuid

  @@unique([title, parent_id])
}

model maps {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title       String  @default("New Map")
  isFolder    Boolean @default(false)
  isPublic    Boolean @default(false)
  clusterPins Boolean @default(false)

  image     images? @relation(fields: [images_id], references: [id])
  images_id String? @db.Uuid
  icon      String?

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  map_pins   map_pins[]
  map_layers map_layers[]

  parent_id String? @db.Uuid
  parent    maps?   @relation("parentChildMaps", fields: [parent_id], references: [id], onDelete: Cascade)
  children  maps[]  @relation("parentChildMaps")
  tags      tags[]
}

model map_pins {
  id              String   @id @default(uuid()) @db.Uuid
  text            String?
  parent          maps?    @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id       String   @db.Uuid
  lat             Float
  lng             Float
  color           String   @default("#ffffff")
  borderColor     String   @default("#ffffff")
  backgroundColor String   @default("#000000")
  icon            String?
  image           images?  @relation(fields: [images_id], references: [id])
  images_id       String?  @db.Uuid
  showBackground  Boolean  @default(true)
  showBorder      Boolean  @default(true)
  isPublic        Boolean?
  tags            tags[]

  map_link String? @db.Uuid
  doc_id   String? @db.Uuid
}

model map_layers {
  id        String   @id @default(uuid()) @db.Uuid
  title     String   @default("New Layer")
  image     String?
  parent_id String   @db.Uuid
  isPublic  Boolean?
  maps      maps?    @relation(fields: [parent_id], references: [id], onDelete: Cascade)
}

model boards {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title    String   @default("New Board")
  isFolder Boolean?
  isPublic Boolean?
  sort     Int      @default(0)

  icon String?

  defaultNodeShape String @default("rectangle")
  defaultNodeColor String @default("#595959")
  defaultEdgeColor String @default("#595959")

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid
  parent_id  String?  @db.Uuid
  parent     boards?  @relation("parentChildBoards", fields: [parent_id], references: [id], onDelete: Cascade)
  children   boards[] @relation("parentChildBoards")
  nodes      nodes[]
  edges      edges[]
  tags       tags[]
}

model nodes {
  id    String  @id @default(uuid()) @db.Uuid
  label String?

  type   String?
  width  Int?
  height Int?
  x      Float?
  y      Float?

  fontSize   Int?
  fontColor  String?
  fontFamily String?
  textVAlign String?
  textHAlign String?

  backgroundColor   String?
  backgroundOpacity Float?

  locked     Boolean?
  isTemplate Boolean?
  zIndex     Int?

  board        boards     @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  document     documents? @relation(fields: [doc_id], references: [id])
  doc_id       String?    @db.Uuid
  image        images?    @relation(fields: [images_id], references: [id])
  images_id    String?    @db.Uuid
  parent_id    String     @db.Uuid
  edges_source edges[]    @relation("edges_source")
  edges_target edges[]    @relation("edges_target")
  tags         tags[]
}

model edges {
  id    String  @id @default(uuid()) @db.Uuid
  label String?

  curveStyle  String?
  lineStyle   String?
  lineColor   String?
  lineFill    String?
  lineOpacity Float?
  width       Int?

  controlPointDistances Int?
  controlPointWeights   Float?

  taxiDirection String?
  taxiTurn      Int?

  arrowScale Int?

  targetArrowShape String?
  targetArrowFill  String?
  targetArrowColor String?

  sourceArrowShape String?
  sourceArrowFill  String?
  sourceArrowColor String?

  midTargetArrowShape String?
  midTargetArrowFill  String?
  midTargetArrowColor String?

  midSourceArrowShape String?
  midSourceArrowFill  String?
  midSourceArrowColor String?

  fontSize   Int?
  fontColor  String?
  fontFamily String?

  zIndex Int?

  board     boards @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  source    nodes  @relation("edges_source", fields: [source_id], references: [id], onDelete: Cascade)
  target    nodes  @relation("edges_target", fields: [target_id], references: [id], onDelete: Cascade)
  source_id String @db.Uuid
  target_id String @db.Uuid
  parent_id String @db.Uuid
  tags      tags[]

  @@unique([source_id, target_id])
}

model screens {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title      String   @default("New Screen")
  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parent_id String?   @db.Uuid
  parent    screens?  @relation("parentChildScreens", fields: [parent_id], references: [id], onDelete: Cascade)
  children  screens[] @relation("parentChildScreens")

  icon     String?
  isFolder Boolean?
  isPublic Boolean?

  sectionSize String     @default("md")
  sections    sections[]
  tags        tags[]
}

model sections {
  id       String @id @default(uuid()) @db.Uuid
  title    String
  sort     Int    @default(0)
  cardSize String @default("md")

  screens   screens? @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String?  @db.Uuid

  cards cards[]
}

model cards {
  id   String @id @default(uuid()) @db.Uuid
  sort Int    @default(0)

  document    documents @relation(fields: [documentsId], references: [id], onDelete: Cascade)
  documentsId String    @db.Uuid

  sections  sections? @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String?   @db.Uuid

  tags tags[]

  @@unique([parent_id, documentsId])
}

model dictionaries {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  icon     String?
  isFolder Boolean?
  isPublic Boolean?

  parent_id String?        @db.Uuid
  parent    dictionaries?  @relation("parentChildDictionaries", fields: [parent_id], references: [id], onDelete: Cascade)
  children  dictionaries[] @relation("parentChildDictionaries")

  tags  tags[]
  words words[]

  @@unique([project_id, title])
}

model words {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  translation String

  dictionary dictionaries @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id  String       @db.Uuid

  @@unique([title, translation, parent_id])
}

model calendars {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parent_id String?     @db.Uuid
  parent    calendars?  @relation("parentChildCalendar", fields: [parent_id], references: [id], onDelete: Cascade)
  children  calendars[] @relation("parentChildCalendar")

  icon     String?
  isFolder Boolean?
  isPublic Boolean?

  offset  Int  @default(0)
  hours   Int?
  minutes Int?

  months months[]
  days   String[]
  events events[]

  tags      tags[]
  timelines timelines[]
}

model months {
  id    String @id @default(uuid()) @db.Uuid
  title String
  days  Int

  calendar  calendars @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  sort      Int       @default(0)
  parent_id String    @db.Uuid
  events    events[]
}

model events {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  isPublic Boolean @default(false)

  document  documents? @relation(fields: [documentsId], references: [id])
  image     images?    @relation(fields: [images_id], references: [id])
  images_id String?    @db.Uuid

  backgroundColor String?
  textColor       String?

  calendar calendars? @relation(fields: [calendarsId], references: [id], onDelete: Cascade)
  year     Int
  month    months     @relation(fields: [monthsId], references: [id], onDelete: Cascade)
  day      Int
  hours    Int?
  minutes  Int?

  tags tags[]

  calendarsId String? @db.Uuid
  documentsId String? @db.Uuid
  monthsId    String  @db.Uuid
}

model timelines {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parent_id String?     @db.Uuid
  parent    timelines?  @relation("parentChildTimeline", fields: [parent_id], references: [id], onDelete: Cascade)
  children  timelines[] @relation("parentChildTimeline")

  icon     String?
  isFolder Boolean?
  isPublic Boolean?

  calendars calendars[]
}

model random_tables {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title       String
  description String?

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parent    random_tables?  @relation("parentChildRandomTables", fields: [parent_id], references: [id], onDelete: Cascade)
  children  random_tables[] @relation("parentChildRandomTables")
  parent_id String?         @db.Uuid

  isShared Boolean @default(false)

  icon                 String?
  isFolder             Boolean?
  isPublic             Boolean?
  random_table_options random_table_options[]
}

model random_table_options {
  id           String        @id @default(uuid()) @db.Uuid
  title        String
  description  String?
  random_table random_tables @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id    String        @db.Uuid
  icon         String?
  iconColor    String?
}

model tags {
  id    String @id @default(uuid()) @db.Uuid
  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  documents    documents[]
  maps         maps[]
  map_pins     map_pins[]
  boards       boards[]
  nodes        nodes[]
  edges        edges[]
  screens      screens[]
  cards        cards[]
  dictionaries dictionaries[]
  calendars    calendars[]
  events       events[]

  @@unique([title, project_id])
}

model swatches {
  id    String  @id @default(uuid()) @db.Uuid
  title String?
  color String  @default("#595959")

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  @@unique([color, project_id])
}

model webhooks {
  id    String @id @default(uuid()) @db.Uuid
  title String
  url   String
  user  users  @relation(fields: [user_id], references: [id])

  user_id String @db.Uuid

  @@unique([id, user_id])
}
