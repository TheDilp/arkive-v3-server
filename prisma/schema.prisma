generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  auth_id  String @unique
  nickname String
  email    String @unique

  projectsId String?    @db.Uuid
  projects   projects[] @relation("project_members")
  createrOf  projects[] @relation("project_owner")
}

model projects {
  id           String         @id @default(uuid()) @db.Uuid
  title        String         @default("New Project")
  documents    documents[]
  maps         maps[]
  boards       boards[]
  screens      screens[]
  dictionaries dictionaries[]
  tags         tags[]
  image        String?

  ownerId   String
  owner     User        @relation("project_owner", fields: [ownerId], references: [auth_id], onDelete: Cascade)
  members   User[]      @relation("project_members")
  calendars calendars[]
}

model documents {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @default("New Document")
  content     Json?    @db.JsonB
  icon        String?  @default("mdi:file")
  expanded    Boolean  @default(false)
  folder      Boolean  @default(false)
  isPublic    Boolean  @default(false)
  sort        Int      @default(0)
  template    Boolean  @default(false)
  properties  Json?
  alter_names String[] @default([])
  image       String?

  // Relations
  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid
  nodes      nodes[]

  parentId String?     @db.Uuid
  parent   documents?  @relation("parentChildDocuments", fields: [parentId], references: [id], onDelete: Cascade)
  children documents[] @relation("parentChildDocuments")

  tags   tags[]
  tagsId String? @db.Uuid

  cards cards[]
}

model maps {
  id       String  @id @default(uuid()) @db.Uuid
  title    String  @default("New Map")
  folder   Boolean @default(false)
  isPublic Boolean @default(false)
  expanded Boolean @default(false)
  sort     Int     @default(0)

  image String?
  icon  String? @default("mdi:map")

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  map_pins   map_pins[]
  map_layers map_layers[]

  parentId String? @db.Uuid
  parent   maps?   @relation("parentChildMaps", fields: [parentId], references: [id], onDelete: Cascade)
  children maps[]  @relation("parentChildMaps")
  tags     tags[]
}

model map_pins {
  id              String  @id @default(uuid()) @db.Uuid
  text            String?
  parent          maps?   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId        String  @db.Uuid
  lat             Float
  lng             Float
  color           String  @default("#ffffff")
  backgroundColor String  @default("#000000")
  icon            String
  isPublic        Boolean @default(true)
  tags            tags[]

  map_link String? @db.Uuid
  doc_id   String? @db.Uuid
}

model map_layers {
  id       String  @id @default(uuid()) @db.Uuid
  title    String  @default("New Layer")
  image    String?
  parentId String  @db.Uuid
  isPublic Boolean @default(false)
  maps     maps?   @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model boards {
  id       String  @id @default(uuid()) @db.Uuid
  title    String  @default("New Board")
  folder   Boolean @default(false)
  isPublic Boolean @default(false)
  expanded Boolean @default(false)
  sort     Int     @default(0)

  icon String? @default("mdi:draw")

  defaultNodeShape String  @default("rectangle")
  defaultNodeColor String  @default("#595959")
  defaultEdgeColor String  @default("#595959")
  defaultGrid      Boolean @default(false)

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid
  parentId   String?  @db.Uuid
  parent     boards?  @relation("parentChildBoards", fields: [parentId], references: [id], onDelete: Cascade)
  children   boards[] @relation("parentChildBoards")
  nodes      nodes[]
  edges      edges[]
  tags       tags[]
}

model nodes {
  id    String  @id @default(uuid()) @db.Uuid
  label String?

  type   String @default("rectangle")
  width  Int    @default(50)
  height Int    @default(50)
  x      Float  @default(0)
  y      Float  @default(0)

  fontSize   Int    @default(16)
  fontColor  String @default("#ffffff")
  fontFamily String @default("Lato")
  textVAlign String @default("center")
  textHAlign String @default("center")

  backgroundColor   String @default("#595959")
  backgroundOpacity Float  @default(1)

  locked   Boolean @default(false)
  template Boolean @default(false)
  zIndex   Int     @default(1)

  board        boards     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  document     documents? @relation(fields: [doc_id], references: [id])
  doc_id       String?    @db.Uuid
  image        String?
  parentId     String     @db.Uuid
  edges_source edges[]    @relation("edges_source")
  edges_target edges[]    @relation("edges_target")
  tags         tags[]
}

model edges {
  id    String  @id @default(uuid()) @db.Uuid
  label String?

  curveStyle  String @default("straight")
  lineStyle   String @default("solid")
  lineColor   String @default("#595959")
  lineCap     String @default("butt")
  lineFill    String @default("solid")
  lineOpacity Int    @default(1)
  width       Int    @default(1)

  controlPointDistances Int   @default(-100)
  controlPointWeights   Float @default(0.5)

  taxiDirection String @default("auto")
  taxiTurn      Int    @default(50)

  arrowScale Int @default(1)

  targetArrowShape String @default("triangle")
  targetArrowFill  String @default("filled")
  targetArrowColor String @default("#595959")

  sourceArrowShape String @default("none")
  sourceArrowFill  String @default("filled")
  sourceArrowColor String @default("#595959")

  midTargetArrowShape String @default("none")
  midTargetArrowFill  String @default("filled")
  midTargetArrowColor String @default("#595959")

  midSourceArrowShape String @default("none")
  midSourceArrowFill  String @default("filled")
  midSourceArrowColor String @default("#595959")

  fontSize   Int    @default(16)
  fontColor  String @default("#ffffff")
  fontFamily String @default("Lato")

  zIndex Int @default(1)

  board     boards @relation(fields: [parentId], references: [id], onDelete: Cascade)
  source    nodes  @relation("edges_source", fields: [source_id], references: [id], onDelete: Cascade)
  target    nodes  @relation("edges_target", fields: [target_id], references: [id], onDelete: Cascade)
  source_id String @db.Uuid
  target_id String @db.Uuid
  parentId  String @db.Uuid
  tags      tags[]
}

model screens {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @default("New Screen")
  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  parentId String?   @db.Uuid
  parent   screens?  @relation("parentChildScreens", fields: [parentId], references: [id], onDelete: Cascade)
  children screens[] @relation("parentChildScreens")

  icon     String  @default("fluent:board-24-regular")
  folder   Boolean @default(false)
  isPublic Boolean @default(false)
  expanded Boolean @default(false)
  sort     Int     @default(0)

  sectionSize String     @default("md")
  sections    sections[]
  tags        tags[]
}

model sections {
  id       String  @id @default(uuid()) @db.Uuid
  title    String
  sort     Int     @default(0)
  expanded Boolean @default(true)

  screens  screens? @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?  @db.Uuid

  cards cards[]
}

model cards {
  id       String  @id @default(uuid()) @db.Uuid
  sort     Int     @default(0)
  expanded Boolean @default(true)

  document    documents @relation(fields: [documentsId], references: [id], onDelete: Cascade)
  documentsId String    @db.Uuid

  sections sections? @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?   @db.Uuid

  tags tags[]

  @@unique([parentId, documentsId])
}

model dictionaries {
  id    String @id @default(uuid()) @db.Uuid
  title String @unique

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  sort     Int     @default(0)
  expanded Boolean @default(true)
  folder   Boolean @default(false)
  isPublic Boolean @default(false)

  parentId String?        @db.Uuid
  parent   dictionaries?  @relation("parentChildDictionaries", fields: [parentId], references: [id], onDelete: Cascade)
  children dictionaries[] @relation("parentChildDictionaries")

  tags  tags[]
  words words[]
}

model words {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  translation String

  dictionary dictionaries @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId   String       @db.Uuid

  @@unique([title, translation, parentId])
}

model calendars {
  id    String @id @default(uuid()) @db.Uuid
  title String

  project    projects @relation(fields: [project_id], references: [id])
  project_id String   @db.Uuid

  parentId String?     @db.Uuid
  parent   calendars?  @relation("parentChildCalendar", fields: [parentId], references: [id], onDelete: Cascade)
  children calendars[] @relation("parentChildCalendar")

  sort     Int     @default(0)
  expanded Boolean @default(true)
  folder   Boolean @default(false)
  isPublic Boolean @default(false)

  hours   Int?
  minutes Int?

  eras   eras[]
  months months[]
  days   String[]
  events events[]

  tags tags[]
}

model eras {
  id         String @id @default(uuid()) @db.Uuid
  title      String
  start_year Int
  end_year   Int

  calendar calendars @relation(fields: [parentId], references: [id])
  parentId String    @db.Uuid

  sort   Int      @default(0)
  events events[]
}

model months {
  id    String @id @default(uuid()) @db.Uuid
  title String
  days  Int

  calendar calendars @relation(fields: [parentId], references: [id])
  sort     Int       @default(0)
  events   events[]
  parentId String    @db.Uuid
}

model events {
  id    String @id @default(uuid()) @db.Uuid
  title String

  calendar calendars? @relation(fields: [calendarsId], references: [id])
  era      eras?      @relation(fields: [erasId], references: [id])
  year     Int
  month    months     @relation(fields: [monthsId], references: [id])
  day      Int
  hours    Int?
  minutes  Int?

  tags tags[]

  erasId      String? @db.Uuid
  monthsId    String  @db.Uuid
  calendarsId String? @db.Uuid
}

model tags {
  id    String @id @default(uuid()) @db.Uuid
  title String

  project    projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String   @db.Uuid

  documents    documents[]
  maps         maps[]
  map_pins     map_pins[]
  boards       boards[]
  nodes        nodes[]
  edges        edges[]
  screens      screens[]
  cards        cards[]
  dictionaries dictionaries[]
  calendars    calendars[]
  events       events[]

  @@unique([title, project_id])
}
